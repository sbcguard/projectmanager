// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement()) @map("_id")
  name          String
  email         String    @unique
  emailVerified DateTime?
  image         String?
  account       Account[]
  projects      Project[]
  aiChat        AiChat[]
}

model Account {
  id                Int     @id @default(autoincrement()) @map("_id")
  userId            Int
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Project {
  id            Int            @id @default(autoincrement()) @map("_id")
  name          String         @unique
  description   String
  slug          String         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  projectBoards ProjectBoard[]
  userId        Int
  user          User           @relation(fields: [userId], references: [id])
}

model ProjectBoard {
  id        Int       @id @default(autoincrement()) @map("_id")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  status    String
  order     Int
  slug      String
  features  Feature[]
  project   Project   @relation(fields: [projectId], references: [id])
  projectId Int

  @@unique([slug, status, projectId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

model Feature {
  id             Int          @id @default(autoincrement()) @map("_id")
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  slug           String
  name           String
  description    String
  priority       Priority     @default(LOW)
  finishDate     DateTime
  order          Int
  projectBoard   ProjectBoard @relation(fields: [projectBoardId], references: [id])
  projectBoardId Int

  @@unique([slug, projectBoardId])
}

model AiChat {
  id      Int      @id @default(autoincrement()) @map("_id")
  role    ChatRole
  content String
  userId  Int
  user    User     @relation(fields: [userId], references: [id])
}

enum ChatRole {
  user
  assistant
}
